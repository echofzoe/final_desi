<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ryj.yuyue.dao.ScoreMapper">
  <resultMap id="BaseResultMap" type="com.ryj.yuyue.bean.Score">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="u_id" jdbcType="INTEGER" property="uId" />
    <result column="cla_id" jdbcType="INTEGER" property="claId" />
    <result column="cla_k_id" jdbcType="INTEGER" property="claKId" />
    <result column="p_id" jdbcType="INTEGER" property="pId" />
    <result column="score" jdbcType="REAL" property="score" />
    <result column="comment" jdbcType="VARCHAR" property="comment" />
    <result column="score_time" jdbcType="DATE" property="scoreTime" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
  </resultMap>
  <resultMap id="BaseResultMapResult" type="com.ryj.yuyue.bean.ScoreResult">
    <result column="id" property="id" />
    <result column="u_id" property="uId" />
    <result column="u_name" property="uName" />
    <result column="cla_id" property="claId" />
    <result column="cla_k_id" property="claKId" />
    <result column="cla_k_name" property="classKName" />
    <result column="p_id" property="pId" />
    <result column="s_name" property="pName" />
    <result column="score" property="score" />
    <result column="comment" property="comment" />
    <result column="score_time" property="scoreTime" />
    <result column="order_id" property="orderId" />
    <result column="ord_time" property="orderTime" />
    <result column="age" property="age" />
    <result column="gender" property="gender" />
    <result column="pic_url" property="picUrl" />
  </resultMap>
  
  <resultMap id="BaseResultMapForNew" type="com.ryj.yuyue.utils.ScoreToken">
    <result column="cla_k_id" property="classKindId" />
    <result column="number" property="number" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, u_id, cla_id, cla_k_id, p_id, score, comment, score_time, order_id, age, gender
  </sql>
  <sql id="Base_Column_List_Result">
    s.id, s.u_id, u.u_name, s.cla_id, s.cla_k_id, ck.cla_k_name, s.p_id, p.s_name, 
	s.score, s.comment,  s.score_time, s.order_id, co.ord_time, s.gender, s.age, p.pic_url
  </sql>
  <select id="selectByExample" parameterType="com.ryj.yuyue.bean.ScoreExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from score
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from score
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from score
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ryj.yuyue.bean.ScoreExample">
    delete from score
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ryj.yuyue.bean.Score">
    insert into score (id, u_id, cla_id, 
      cla_k_id, p_id, score, comment, 
      score_time, order_id, age, 
      gender)
    values (#{id,jdbcType=INTEGER}, #{uId,jdbcType=INTEGER}, #{claId,jdbcType=INTEGER}, 
      #{claKId,jdbcType=INTEGER}, #{pId,jdbcType=INTEGER}, #{score,jdbcType=REAL}, #{comment,jdbcType=VARCHAR}, 
      #{scoreTime,jdbcType=DATE}, #{orderId,jdbcType=INTEGER}, #{age,jdbcType=INTEGER}, 
      #{gender,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.ryj.yuyue.bean.Score">
    insert into score
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uId != null">
        u_id,
      </if>
      <if test="claId != null">
        cla_id,
      </if>
      <if test="claKId != null">
        cla_k_id,
      </if>
      <if test="pId != null">
        p_id,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="comment != null">
        comment,
      </if>
      <if test="scoreTime != null">
        score_time,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="gender != null">
        gender,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uId != null">
        #{uId,jdbcType=INTEGER},
      </if>
      <if test="claId != null">
        #{claId,jdbcType=INTEGER},
      </if>
      <if test="claKId != null">
        #{claKId,jdbcType=INTEGER},
      </if>
      <if test="pId != null">
        #{pId,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        #{score,jdbcType=REAL},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=VARCHAR},
      </if>
      <if test="scoreTime != null">
        #{scoreTime,jdbcType=DATE},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ryj.yuyue.bean.ScoreExample" resultType="java.lang.Long">
    select count(*) from score
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <!-- List<ScoreResult> getScore(
    		@Param("classKId") Integer classKId,
    		@Param("userId") Integer userId,
    		@Param("placeId") Integer placeId); -->
  <select id="getScore" resultMap="BaseResultMapResult">
    select 
    <include refid="Base_Column_List_Result" />
    from score s, class_order co, place p, class_kind ck, user u
    <trim prefix="where" prefixOverrides="and">
      s.p_id = p.id and s.cla_k_id = ck.id and s.order_id = co.id 
      and s.u_id = u.id
      <if test="userId != null">
        and u.id = #{userId}
      </if>
      <if test="classKId != null">
        and ck.id = #{classKId}
      </if>
      <if test="placeId != null">
        and ck.p_id = #{placeId}
      </if>
    </trim>
    order by s.score_time desc
  </select>
  <!-- List<ScoreToken> recommandForNewUser(
    		@Param("age") Integer age,
    		@Param("gender") String gender,
    		@Param("property") String property); -->
  <select id="recommandForNewUser" resultMap="BaseResultMapForNew">
    select s.cla_k_id, count(cla_k_id) as number 
	from score s, class_kind ck
    <trim prefix="where" prefixOverrides="and">
      s.cla_k_id = ck.id
      <if test="age != null">
        and age between (#{age} - 1) and (#{age} + 1)
      </if>
      <if test="gender != null">
        and gender = #{gender}
      </if>
      <if test="property != null">
        and ck.property = #{property}
      </if>
    </trim>
    group by cla_k_id
	order by number desc
  </select>
  <!-- ScoreResult getScoreResultById(
    		@Param("id") Integer id); -->
  <select id="getScoreResultById" resultMap="BaseResultMapResult">
    select 
    <include refid="Base_Column_List_Result" />
    from score s, class_order co, place p, class_kind ck, user u
    <trim prefix="where" prefixOverrides="and">
      s.p_id = p.id and s.cla_k_id = ck.id and s.order_id = co.id 
      and s.u_id = u.id
      <if test="id != null">
        and s.id = #{id}
      </if>
    </trim>
  </select>
  <!-- List<ScoreResult> getAllScore(); -->
  <select id="getAllScore" resultMap="BaseResultMapResult">
    select 
    <include refid="Base_Column_List_Result" />
    from score s, class_order co, place p, class_kind ck, user u
    <trim prefix="where" prefixOverrides="and">
      s.p_id = p.id and s.cla_k_id = ck.id and s.order_id = co.id 
      and s.u_id = u.id
    </trim>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update score
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uId != null">
        u_id = #{record.uId,jdbcType=INTEGER},
      </if>
      <if test="record.claId != null">
        cla_id = #{record.claId,jdbcType=INTEGER},
      </if>
      <if test="record.claKId != null">
        cla_k_id = #{record.claKId,jdbcType=INTEGER},
      </if>
      <if test="record.pId != null">
        p_id = #{record.pId,jdbcType=INTEGER},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=REAL},
      </if>
      <if test="record.comment != null">
        comment = #{record.comment,jdbcType=VARCHAR},
      </if>
      <if test="record.scoreTime != null">
        score_time = #{record.scoreTime,jdbcType=DATE},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=INTEGER},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update score
    set id = #{record.id,jdbcType=INTEGER},
      u_id = #{record.uId,jdbcType=INTEGER},
      cla_id = #{record.claId,jdbcType=INTEGER},
      cla_k_id = #{record.claKId,jdbcType=INTEGER},
      p_id = #{record.pId,jdbcType=INTEGER},
      score = #{record.score,jdbcType=REAL},
      comment = #{record.comment,jdbcType=VARCHAR},
      score_time = #{record.scoreTime,jdbcType=DATE},
      order_id = #{record.orderId,jdbcType=INTEGER},
      age = #{record.age,jdbcType=INTEGER},
      gender = #{record.gender,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ryj.yuyue.bean.Score">
    update score
    <set>
      <if test="uId != null">
        u_id = #{uId,jdbcType=INTEGER},
      </if>
      <if test="claId != null">
        cla_id = #{claId,jdbcType=INTEGER},
      </if>
      <if test="claKId != null">
        cla_k_id = #{claKId,jdbcType=INTEGER},
      </if>
      <if test="pId != null">
        p_id = #{pId,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=REAL},
      </if>
      <if test="comment != null">
        comment = #{comment,jdbcType=VARCHAR},
      </if>
      <if test="scoreTime != null">
        score_time = #{scoreTime,jdbcType=DATE},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ryj.yuyue.bean.Score">
    update score
    set u_id = #{uId,jdbcType=INTEGER},
      cla_id = #{claId,jdbcType=INTEGER},
      cla_k_id = #{claKId,jdbcType=INTEGER},
      p_id = #{pId,jdbcType=INTEGER},
      score = #{score,jdbcType=REAL},
      comment = #{comment,jdbcType=VARCHAR},
      score_time = #{scoreTime,jdbcType=DATE},
      order_id = #{orderId,jdbcType=INTEGER},
      age = #{age,jdbcType=INTEGER},
      gender = #{gender,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>